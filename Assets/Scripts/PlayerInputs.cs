//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Scripts/PlayerInputs.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInputs: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInputs()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInputs"",
    ""maps"": [
        {
            ""name"": ""Player"",
            ""id"": ""69238f40-dc99-4948-a1db-081d47b5f2b5"",
            ""actions"": [
                {
                    ""name"": ""MousePress"",
                    ""type"": ""Button"",
                    ""id"": ""afa24044-2428-4fbe-8995-bd96c4624946"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Look"",
                    ""type"": ""Value"",
                    ""id"": ""1bbca3e0-d584-4782-a077-157b3f4b9d88"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""TargetNextUnit"",
                    ""type"": ""Button"",
                    ""id"": ""1bbf6886-e6e7-49c1-b917-238e6e9e295e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""TargetPreviousUnit"",
                    ""type"": ""Button"",
                    ""id"": ""18ec8dba-35a6-4c97-ae43-b8f4872fab17"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""9d2f995b-529b-4328-9049-abeb47df2e32"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b82a1c84-068d-4b4b-a4cb-4b697d46eddd"",
                    ""path"": ""<Pointer>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5e94e700-9283-499e-8405-c7fdc0fda960"",
                    ""path"": ""<Joystick>/{Hatswitch}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6139261c-da6b-425e-8249-cc64abebc330"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MousePress"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7357b678-0a3d-4c3c-b0da-efb3b10445f8"",
                    ""path"": ""<Keyboard>/#(Q)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MousePress"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8d8c24d7-6953-4dbd-b1a8-528d58242e3d"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TargetNextUnit"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5505be5c-6a33-4fed-8a64-8e3b0761a4fa"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TargetPreviousUnit"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Throw"",
            ""id"": ""720c091c-a82d-4f4c-9b46-39d94cc289a9"",
            ""actions"": [
                {
                    ""name"": ""Look"",
                    ""type"": ""Value"",
                    ""id"": ""145b6453-030f-4756-989b-cb977e4e681e"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""MousePress"",
                    ""type"": ""Button"",
                    ""id"": ""3f0502eb-783f-4b82-bf7f-58e52ce3c8a1"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""e0965f10-61e2-416c-9e20-2550a4bc35a7"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""87e39ef8-280f-4d21-a984-b71d5f3130c3"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MousePress"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a61b86ae-f622-4a33-8eef-c2642729f64f"",
                    ""path"": ""<Keyboard>/#(Q)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MousePress"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Player
        m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
        m_Player_MousePress = m_Player.FindAction("MousePress", throwIfNotFound: true);
        m_Player_Look = m_Player.FindAction("Look", throwIfNotFound: true);
        m_Player_TargetNextUnit = m_Player.FindAction("TargetNextUnit", throwIfNotFound: true);
        m_Player_TargetPreviousUnit = m_Player.FindAction("TargetPreviousUnit", throwIfNotFound: true);
        // Throw
        m_Throw = asset.FindActionMap("Throw", throwIfNotFound: true);
        m_Throw_Look = m_Throw.FindAction("Look", throwIfNotFound: true);
        m_Throw_MousePress = m_Throw.FindAction("MousePress", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player
    private readonly InputActionMap m_Player;
    private List<IPlayerActions> m_PlayerActionsCallbackInterfaces = new List<IPlayerActions>();
    private readonly InputAction m_Player_MousePress;
    private readonly InputAction m_Player_Look;
    private readonly InputAction m_Player_TargetNextUnit;
    private readonly InputAction m_Player_TargetPreviousUnit;
    public struct PlayerActions
    {
        private @PlayerInputs m_Wrapper;
        public PlayerActions(@PlayerInputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @MousePress => m_Wrapper.m_Player_MousePress;
        public InputAction @Look => m_Wrapper.m_Player_Look;
        public InputAction @TargetNextUnit => m_Wrapper.m_Player_TargetNextUnit;
        public InputAction @TargetPreviousUnit => m_Wrapper.m_Player_TargetPreviousUnit;
        public InputActionMap Get() { return m_Wrapper.m_Player; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Add(instance);
            @MousePress.started += instance.OnMousePress;
            @MousePress.performed += instance.OnMousePress;
            @MousePress.canceled += instance.OnMousePress;
            @Look.started += instance.OnLook;
            @Look.performed += instance.OnLook;
            @Look.canceled += instance.OnLook;
            @TargetNextUnit.started += instance.OnTargetNextUnit;
            @TargetNextUnit.performed += instance.OnTargetNextUnit;
            @TargetNextUnit.canceled += instance.OnTargetNextUnit;
            @TargetPreviousUnit.started += instance.OnTargetPreviousUnit;
            @TargetPreviousUnit.performed += instance.OnTargetPreviousUnit;
            @TargetPreviousUnit.canceled += instance.OnTargetPreviousUnit;
        }

        private void UnregisterCallbacks(IPlayerActions instance)
        {
            @MousePress.started -= instance.OnMousePress;
            @MousePress.performed -= instance.OnMousePress;
            @MousePress.canceled -= instance.OnMousePress;
            @Look.started -= instance.OnLook;
            @Look.performed -= instance.OnLook;
            @Look.canceled -= instance.OnLook;
            @TargetNextUnit.started -= instance.OnTargetNextUnit;
            @TargetNextUnit.performed -= instance.OnTargetNextUnit;
            @TargetNextUnit.canceled -= instance.OnTargetNextUnit;
            @TargetPreviousUnit.started -= instance.OnTargetPreviousUnit;
            @TargetPreviousUnit.performed -= instance.OnTargetPreviousUnit;
            @TargetPreviousUnit.canceled -= instance.OnTargetPreviousUnit;
        }

        public void RemoveCallbacks(IPlayerActions instance)
        {
            if (m_Wrapper.m_PlayerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerActions @Player => new PlayerActions(this);

    // Throw
    private readonly InputActionMap m_Throw;
    private List<IThrowActions> m_ThrowActionsCallbackInterfaces = new List<IThrowActions>();
    private readonly InputAction m_Throw_Look;
    private readonly InputAction m_Throw_MousePress;
    public struct ThrowActions
    {
        private @PlayerInputs m_Wrapper;
        public ThrowActions(@PlayerInputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @Look => m_Wrapper.m_Throw_Look;
        public InputAction @MousePress => m_Wrapper.m_Throw_MousePress;
        public InputActionMap Get() { return m_Wrapper.m_Throw; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ThrowActions set) { return set.Get(); }
        public void AddCallbacks(IThrowActions instance)
        {
            if (instance == null || m_Wrapper.m_ThrowActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_ThrowActionsCallbackInterfaces.Add(instance);
            @Look.started += instance.OnLook;
            @Look.performed += instance.OnLook;
            @Look.canceled += instance.OnLook;
            @MousePress.started += instance.OnMousePress;
            @MousePress.performed += instance.OnMousePress;
            @MousePress.canceled += instance.OnMousePress;
        }

        private void UnregisterCallbacks(IThrowActions instance)
        {
            @Look.started -= instance.OnLook;
            @Look.performed -= instance.OnLook;
            @Look.canceled -= instance.OnLook;
            @MousePress.started -= instance.OnMousePress;
            @MousePress.performed -= instance.OnMousePress;
            @MousePress.canceled -= instance.OnMousePress;
        }

        public void RemoveCallbacks(IThrowActions instance)
        {
            if (m_Wrapper.m_ThrowActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IThrowActions instance)
        {
            foreach (var item in m_Wrapper.m_ThrowActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_ThrowActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public ThrowActions @Throw => new ThrowActions(this);
    public interface IPlayerActions
    {
        void OnMousePress(InputAction.CallbackContext context);
        void OnLook(InputAction.CallbackContext context);
        void OnTargetNextUnit(InputAction.CallbackContext context);
        void OnTargetPreviousUnit(InputAction.CallbackContext context);
    }
    public interface IThrowActions
    {
        void OnLook(InputAction.CallbackContext context);
        void OnMousePress(InputAction.CallbackContext context);
    }
}
